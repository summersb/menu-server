services:
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - menu
    command: -c max_connections=100 -c work_mem=16MB -c log_min_messages=INFO -c log_min_duration_statement=500

  app:
    build: .
    command: npm run dev
    working_dir: /app
    environment:
      UV_THREADPOOL_SIZE: 16
      DATABASE_URL: "postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}"
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${APP_PORT}
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS}
    volumes:
      - .:/app            # Map local project into container
      - /app/node_modules # Avoid overwriting node_modules from volume mapping
    depends_on:
      - db
    networks:
      - menu

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - app
    networks:
      - menu

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - menu

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - menu
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro

volumes:
  postgres-data:
  grafana-data:

networks:
  menu: